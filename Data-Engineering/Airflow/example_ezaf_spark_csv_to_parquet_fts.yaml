apiVersion: "sparkoperator.hpe.com/v1beta2"
kind: SparkApplication
metadata:
  name: spark-fts-{{dag_run.conf.get("username", "hpedemo-user01")}}-{{ts_nodash|replace("T", "")}}
  namespace: spark
spec:
  sparkConf:
    spark.mapr.extraconf.secret: {{dag_run.conf.get("s3_secret_name", "spark-s3-creds")}}
    spark.hadoop.fs.s3a.path.style.access: "true"
    spark.hadoop.fs.s3a.impl: "org.apache.hadoop.fs.s3a.S3AFileSystem"
    spark.hadoop.fs.s3a.connection.ssl.enabled: "true"
    "spark.driver.extraJavaOptions": "-Dcom.amazonaws.sdk.disableCertChecking=true"
    "spark.executor.extraJavaOptions": "-Dcom.amazonaws.sdk.disableCertChecking=true"
  type: Scala
  sparkVersion: 3.4.0
  mode: cluster
  image: {{dag_run.conf["airgap_registry_url"]|default("", True)}}gcr.io/mapr-252711/ezaf-spark-demo-example:fy23-q3-fts
  imagePullPolicy: Always
  mainApplicationFile: local:///tmp/DataProcessTransfer.jar
  mainClass: com.mapr.sparkdemo.DataProcessTransfer
  arguments:
    - s3a://ezaf-demo/data/financial.csv
    - csv
    - file:///mounts/data/{{dag_run.conf.get("training_path", "financial-processed")}}
    - parquet
  restartPolicy:
    type: Never
  imagePullSecrets:
    - imagepull
  driver:
    cores: 1
    coreLimit: "1000m"
    memory: "512m"
    labels:
      version: 3.4.0
    volumeMounts:
      - mountPath: /mounts/data/
        name: spark-data
  executor:
    cores: 1
    instances: 2
    memory: "512m"
    labels:
      version: 3.4.0
    volumeMounts:
      - mountPath: /mounts/data
        name: spark-data
  volumes:
    - name: spark-data
      persistentVolumeClaim:
        claimName: {{dag_run.conf.get("username", "hpedemo-user01")}}-spark-pvc
